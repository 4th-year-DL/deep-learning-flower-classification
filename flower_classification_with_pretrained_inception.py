# -*- coding: utf-8 -*-
"""flower_classification_with_pretrained_inception.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rWDlhSw2A_-tZuwC-Jf4KAfXKhmEDjbZ

[link text](https://)"""

"""Import tensorflow and other modules."""
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import tensorflow_hub as hub
import tensorflow_datasets as tfds
from tensorflow.keras import layers
from sklearn.metrics import classification_report, confusion_matrix
import logging

logger = tf.get_logger()
logger.setLevel(logging.ERROR)

"""Load and split the dataset"""
(training_set, validation_set), dataset_info = tfds.load(
    'tf_flowers',
    with_info=True,
    as_supervised=True,
    split=['train[:70%]', 'train[70%:]'],
)

"""Data augmentation"""
data_augmentation = tf.keras.Sequential([
    layers.experimental.preprocessing.RandomFlip('horizontal'),
    layers.experimental.preprocessing.RandomRotation(0.2),
])

"""Preprocess data"""
def preprocess_image(image, label):
    image = tf.image.resize(image, (IMAGE_RES, IMAGE_RES))
    image = data_augmentation(image)
    image /= 255.0  # Normalize pixel values to [0, 1]
    return image, label

"""Apply preprocessing and create data batches"""
BATCH_SIZE = 32
train_batches = training_set.shuffle(num_training_examples//4).map(preprocess_image).batch(BATCH_SIZE).prefetch(1)
validation_batches = validation_set.map(preprocess_image).batch(BATCH_SIZE).prefetch(1)

"""Define a custom learning rate scheduler"""
def lr_schedule(epoch):
    if epoch < 10:
        return 0.001
    elif epoch < 20:
        return 0.0001
    else:
        return 0.00001

"""Define the model architecture"""
base_model = tf.keras.applications.EfficientNetB3(input_shape=(IMAGE_RES, IMAGE_RES, 3), include_top=False)
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(num_classes, activation='softmax')
])

"""Compile the model with a custom learning rate scheduler"""
model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=lr_schedule(0)),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

"""Train the model with learning rate scheduling"""
EPOCHS = 30
history = model.fit(
    train_batches,
    epochs=EPOCHS,
    validation_data=validation_batches,
    callbacks=[tf.keras.callbacks.LearningRateScheduler(lr_schedule)]
)

"""Plot training and validation garphs."""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(EPOCHS)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

"""Generate classification report."""

X_train = list(map(lambda x: x[1], validation_set))

preds = model_efficientnet.predict(validation_batches,verbose=1)

pred = np.array([np.argmax(i) for i in preds])
pred[:5]

actual = list(map(lambda x: x[1], validation_set))
actual = np.array(actual)

print(classification_report(pred,actual))

"""Get the Requiremnts to run locally"""

import freeze as freeze

freeze > requirements.txt